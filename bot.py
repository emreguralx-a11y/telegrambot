# ====== GRUP AYARLARI ======
GRUP_ID = -4916448425
GRUP_LINK = "https://t.me/+FRzLywk02FszNTQ0"
ILETISIM_MESAJI = "√úcretsiz Vip i≈ülem kanalƒ±, Robot kullanƒ±mƒ± i√ßin https://t.me/emreguralxc ile ileti≈üime ge√ßebilirsiniz."

# -*- coding: utf-8 -*-
import os, re, time, math, logging, requests, sqlite3
from datetime import datetime, timezone, timedelta
from flask import Flask
from threading import Thread, Timer
import schedule

import telebot
import yfinance as yf
import pandas as pd
import numpy as np

# ====== AYARLAR ======
TOKEN = "8462579006:AAHrb9a3jg6o8aPGTdn0nWnKM3vypuOTsr4"
TR_TZ = timezone(timedelta(hours=3))
bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ====== GRUP KONTROL FONKSƒ∞YONLARI ======
def grup_uye_mi(user_id):
    try:
        uyelik = bot.get_chat_member(GRUP_ID, user_id)
        return uyelik.status in ["member", "administrator", "creator"]
    except:
        return False

def gecikmeli_ozel_mesaj(user_id, kullanici_adi):
    def gonder():
        try:
            ozel_mesaj = f"‚úÖ {kullanici_adi}, analizlerimde memnun kaldƒ±ysan\n{ILETISIM_MESAJI}"
            bot.send_message(user_id, ozel_mesaj)
        except:
            pass
    Timer(60, gonder).start()

# ====== SQLITE VERITABANI ======
def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users
                 (user_id INTEGER PRIMARY KEY, username TEXT, first_name TEXT, date_added TEXT)''')
    conn.commit()
    conn.close()

def log_user(user_id, username, first_name):
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    today = datetime.now().strftime("%Y-%m-%d")
    try:
        c.execute("INSERT OR IGNORE INTO users (user_id, username, first_name, date_added) VALUES (?, ?, ?, ?)", 
                  (user_id, username, first_name, today))
        conn.commit()
    except Exception as e:
        logging.error(f"Kullanƒ±cƒ± kaydetme hatasƒ±: {e}")
    finally:
        conn.close()

# ====== ORJINAL BOT FONKSƒ∞YONLARI ======
def now_tr():
    return datetime.now(TR_TZ).strftime("%Y-%m-%d %H:%M")

def fmt(x, d=2):
    try:
        return f"{float(x):,.{d}f}".replace(",", "_").replace(".", ",").replace("_", ".")
    except Exception:
        return "-"

# ====== SEMBOL E≈ûLEMELERƒ∞ ======
IDX = {
    "us100":"^NDX", "nas100":"^NDX", "nasdaq100":"^NDX", "nq100":"^NDX",
    "spx500":"^GSPC", "us500":"^GSPC", "sp500":"^GSPC",
    "dax40":"^GDAXI", "de40":"^GDAXI",
    "ftse100":"^FTSE", "uk100":"^FTSE",
    "cac40":"^FCHI", "fr40":"^FCHI",
    "hsi50":"^HSI", "hk50":"^HSI",
}
CMD = {
    "xauusd":"GC=F", "altƒ±n":"GC=F", "altin":"GC=F", "xau":"GC=F", "gold":"GC=F",
    "xagusd":"SI=F", "gumus":"SI=F", "g√ºm√º≈ü":"SI=F", "xag":"SI=F", "silver":"SI=F",
    "wti":"CL=F", "usoil":"CL=F", "petrol":"CL=F",
    "brent":"BZ=F", "ukoil":"BZ=F",
    "natgas":"NG=F", "doƒüalgaz":"NG=F", "dogalgaz":"NG=F", "ng":"NG=F",
    "copper":"HG=F", "bakir":"HG=F", "bakƒ±r":"HG=F",
}
FX_ALIAS = {
    "eurusd":"EURUSD=X","gbpusd":"GBPUSD=X","usdtry":"USDTRY=X","eurtry":"EURTRY=X",
    "usdjpy":"USDJPY=X","audusd":"AUDUSD=X","nzdusd":"NZDUSD=X","usdcad":"USDCAD=X",
    "usdchf":"USDCHF=X"
}

def bist(symbol_text):
    s = symbol_text.upper()
    if s.endswith(".IS"): return s
    if re.fullmatch(r"[A-Z]{4,5}", s): return s + ".IS"
    return None

def resolve(t):
    q = t.strip().lower()
    q2 = q.replace(" ", "")
    if q in {"gram altƒ±n","gram altin","gramaltin","gramaltƒ±n","gram","ga"}:
        return "GRAMALTIN_TL"
    m = re.match(r"^([a-z]{3})\s*/\s*([a-z]{3})$", q)
    if m:
        return f"{m.group(1).upper()}{m.group(2).upper()}=X"
    if q2 in FX_ALIAS: return FX_ALIAS[q2]
    if q2 in IDX: return IDX[q2]
    if q2 in CMD: return CMD[q2]
    if q2 in {"btc","eth","bnb","sol","xrp","ada","doge","matic","dot","avax","link","trx","ltc","shib"}:
        return q.upper()+"-USD"
    b = bist(q2)
    if b: return b
    return t.strip()

# ====== TEKNƒ∞K ANALƒ∞Z FONKSƒ∞YONLARI ======
def ema(series, n): return series.ewm(span=n, adjust=False).mean()

def rsi(series, n=14):
    delta = series.diff()
    up = (delta.clip(lower=0)).ewm(alpha=1/n, adjust=False).mean()
    down = (-delta.clip(upper=0)).ewm(alpha=1/n, adjust=False).mean()
    rs = up / down
    return 100 - (100 / (1 + rs))

def pivots_daily(df_day):
    H = float(df_day["High"].iloc[-1]); L = float(df_day["Low"].iloc[-1]); C = float(df_day["Close"].iloc[-1])
    P = (H + L + C) / 3.0
    R1 = 2*P - L; S1 = 2*P - H
    R2 = P + (H - L); S2 = P - (H - L)
    return (S1,S2), (R1,R2), P

def trend_pack(df, label):
    c = df["Close"]
    e20 = ema(c, 20); e50 = ema(c, 50)
    e20_last = float(e20.iloc[-1]); e50_last = float(e50.iloc[-1])
    sig = "BUY" if e20_last > e50_last else ("SELL" if e20_last < e50_last else "NEUTRAL")
    r = float(rsi(c).iloc[-1])
    return {"tf":label, "sig":sig, "rsi":r}

def yahoo_hist(sym, interval, period):
    for _ in range(2):
        try:
            df = yf.download(sym, interval=interval, period=period, progress=False, auto_adjust=True)
            if isinstance(df, pd.DataFrame) and not df.empty:
                return df
        except Exception as e:
            logging.warning(f"Yahoo hist hatasƒ± {sym}: {e}")
        time.sleep(0.6)
    return None

def get_economic_calendar():
    try:
        url = "https://economic-calendar.tradingview.com/events"
        response = requests.get(url, timeout=10)
        events = response.json()
        today = datetime.now().strftime("%Y-%m-%d")
        important_events = []
        for event in events:
            if event['date'].startswith(today) and event['importance'] in ['high', 'medium']:
                important_events.append(event)
        return important_events[:3]
    except Exception as e:
        logging.error(f"Economic calendar error: {e}")
        return None

def build_advanced_advice(t15, t1h, t4h, rsi_d, symbol):
    trends = [t15, t1h, t4h]
    buy_count = sum(1 for t in trends if t["sig"] == "BUY")
    sell_count = sum(1 for t in trends if t["sig"] == "SELL")
    
    if rsi_d >= 70: rsi_text = "a≈üƒ±rƒ± alƒ±m b√∂lgesinde ‚ö†Ô∏è"
    elif rsi_d <= 30: rsi_text = "a≈ü√ºr√º satƒ±m b√∂lgesinde üìâ"
    else: rsi_text = "denge b√∂lgesinde ‚ÜîÔ∏è"
    
    symbol_comment = ""
    if 'USD' in symbol or 'EUR' in symbol: symbol_comment = "D√∂viz √ßiftlerinde Merkez Bankasƒ± a√ßƒ±klamalarƒ±na dikkat."
    elif 'XAU' in symbol or 'ALTIN' in symbol: symbol_comment = "Altƒ±n, enflasyon verilerinden ve Fed a√ßƒ±klamalarƒ±ndan etkilenir."
    elif 'BTC' in symbol or 'ETH' in symbol: symbol_comment = "Kripto paralar global risk i≈ütahƒ±ndan yoƒüun etkilenir."
    
    economic_events = get_economic_calendar()
    economic_comment = ""
    if economic_events:
        economic_comment = "\nüìÖ **√ñnemli Ekonomik Etkinlikler Bug√ºn:**\n"
        for event in economic_events:
            economic_comment += f"‚Ä¢ {event['country']} - {event['title']} ({event['importance'].upper()})\n"
    else:
        economic_comment = "\nüìÖ Ekonomik takvimde bug√ºn √∂nemli bir etkinlik bulunmuyor.\n"
    
    if sell_count >= 2 and rsi_d <= 40:
        trading_advice = "‚Ä¢ Mevcut pozisyonlarƒ± destek seviyelerine yakƒ±n kapatmayƒ± d√º≈ü√ºnebilirsiniz\n‚Ä¢ Yeni short pozisyonlar i√ßin diren√ß seviyelerini bekleyin\n‚Ä¢ Stop-loss seviyelerini unutmayƒ±n"
    elif buy_count >= 2 and rsi_d >= 60:
        trading_advice = "‚Ä¢ Geri √ßekilmelerde kademeli alƒ±m yapƒ±labilir\n‚Ä¢ Yeni long pozisyonlar i√ßin destek seviyelerini bekleyin\n‚Ä¢ Take-profit seviyelerini √∂nceden belirleyin"
    else:
        trading_advice = "‚Ä¢ Yan bant hareketi devam ediyor, pozisyon boyutunu sƒ±nƒ±rlƒ± tutun\n‚Ä¢ Breakout durumunda trend y√∂n√ºnde hareket edin\n‚Ä¢ Risk y√∂netimini asla unutmayƒ±n"
    
    return f"""
üìä **Teknik Analiz**:
‚Ä¢ 15dk: {t15['sig']} (RSI {t15['rsi']:.0f})
‚Ä¢ 1sa: {t1h['sig']} (RSI {t1h['rsi']:.0f})
‚Ä¢ 4sa: {t4h['sig']} (RSI {t4h['rsi']:.0f})

üìà **Genel G√∂r√ºn√ºm**: RSI {rsi_text}. {symbol_comment}

{economic_comment}

üéØ **Trading √ñnerileri**:
{trading_advice}

üí° _Yatƒ±rƒ±m tavsiyesi deƒüildir. Kendi ara≈ütƒ±rmanƒ±zƒ± yapƒ±n._"
"""

def gram_altin_tl():
    px_ons = last_price("^XAU") or last_price("GC=F")
    usdtry = last_price("USDTRY=X")
    if px_ons and usdtry: return (px_ons * usdtry) / 31.1035
    return None

def last_price(sym):
    df = yahoo_hist(sym, "1d", "5d")
    if df is None or df.empty: return None
    return float(df["Close"].iloc[-1])

def analyze_symbol(user_text):
    sym = resolve(user_text)
    if sym == "GRAMALTIN_TL":
        p = gram_altin_tl()
        if p: 
            return {
                "title":"Gram Altƒ±n (TL) ‚Äì model",
                "price": p, "chg": None,
                "pivots": None,
                "trends": None,
                "advice": "Model: XAU(ons)*USDTRY/31.1035. Piyasa sapmalarƒ± ger√ßek kapalƒ±√ßar≈üƒ±dan farklƒ± olabilir."
            }
        else: return None

    day = yahoo_hist(sym, "1d", "6mo")
    if day is None or day.empty: 
        if not sym.upper().endswith(".IS"):
            bis = bist(sym)
            if bis:
                sym = bis
                day = yahoo_hist(sym, "1d", "6mo")
        if day is None or day.empty: return None

    last = float(day["Close"].iloc[-1])
    prev = float(day["Close"].iloc[-2]) if len(day) >= 2 else last
    chg = (last - prev) / prev * 100 if prev != 0 else None

    m15 = yahoo_hist(sym, "15m", "7d")
    if m15 is None or m15.empty: m15 = yahoo_hist(sym, "30m", "30d")
    h1 = yahoo_hist(sym, "60m", "60d")
    h4 = yahoo_hist(sym, "60m", "60d")
    if h4 is not None and not h4.empty:
        try: h4 = h4.resample("4H").agg({"Open":"first","High":"max","Low":"min","Close":"last","Volume":"sum"}).dropna()
        except: h4 = None

    t15 = trend_pack(m15, "15dk") if (m15 is not None and not m15.empty) else {"tf":"15dk","sig":"NEUTRAL","rsi":50.0}
    t1h = trend_pack(h1, "1s") if (h1 is not None and not h1.empty) else {"tf":"1s","sig":"NEUTRAL","rsi":50.0}
    t4h = trend_pack(h4, "4s") if (h4 is not None and not h4.empty) else {"tf":"4s","sig":"NEUTRAL","rsi":50.0}

    rsi_d = float(rsi(day["Close"]).iloc[-1])
    S, R, P = pivots_daily(day)

    return {
        "title": sym,
        "price": last,
        "chg": chg,
        "pivots": {"PP": P, "S1": S[0], "S2": S[1], "R1": R[0], "R2": R[1]},
        "trends": {"t15": t15, "t1h": t1h, "t4h": t4h, "rsi_d": rsi_d}
    }

def render(msg_user, res):
    if res is None: return "Veri alƒ±namadƒ±. Yazƒ±m √∂rnekleri: us100, spx500, dax40, eur/usd, thy ao, altƒ±n, gram altƒ±n, xauusd‚Ä¶"

    if "advice" in res and res["advice"]:
        return f"_{now_tr()}_\n{msg_user}\n\n*{res['title']}*\nFiyat: {fmt(res['price'])} TL\n\n{res['advice']}\n\n‚Äî Manivest Global"

    t15 = res["trends"]["t15"]; t1h = res["trends"]["t1h"]; t4h = res["trends"]["t4h"]; rsi_d = res["trends"]["rsi_d"]
    
    degisim_metni = f"{res['chg']:+.2f}%" if res['chg'] is not None else 'Veri Yok'
    
    message = f"""
üí∞ *{res['title']}* - Detaylƒ± Analiz
üìÖ _{now_tr()}_
üë§ {msg_user}

üíµ **G√ºncel Fiyat**: {fmt(res['price'])} {'USD' if 'USD' in res['title'] else 'TL'}
üìä **24s Deƒüi≈üim**: {degisim_metni}
"""
    
    if res["pivots"]:
        P = res["pivots"]
        message += f"""
üéØ **Pivot Noktalarƒ±**:
‚Ä¢ Pivot: {fmt(P['PP'])}
        
üìâ **Destek Seviyeleri**:
  - S1: {fmt(P['S1'])}
  - S2: {fmt(P['S2'])}
  
üìà **Diren√ß Seviyeleri**:
  - R1: {fmt(P['R1'])}
  - R2: {fmt(P['R2'])}
"""
    
    message += build_advanced_advice(t15, t1h, t4h, rsi_d, res['title'])
    message += "\n\n‚Äî Manivest Global Analiz Ekibi"
    return message

# ====== BOT KOMUTLARI ======
@bot.message_handler(commands=["start","help"])
def start_cmd(msg):
    bot.reply_to(msg, """
üéØ *MANƒ∞VEST Fƒ∞NANS BOTU* - Sorgu Kƒ±lavuzu

*üìà ENDEKSLER:*
‚Ä¢ `us100` / `nas100` - Nasdaq 100
‚Ä¢ `spx500` / `us500` - S&P 500  
‚Ä¢ `dax40` / `de40` - Alman DAX
‚Ä¢ `ftse100` / `uk100` - ƒ∞ngiltere FTSE
‚Ä¢ `cac40` / `fr40` - Fransa CAC 40
‚Ä¢ `hsi50` / `hk50` - Hong Kong Hang Seng

*ü•á EMTƒ∞ALAR:*
‚Ä¢ `altƒ±n` / `xauusd` - Altƒ±n (ONS)
‚Ä¢ `g√ºm√º≈ü` / `xagusd` - G√ºm√º≈ü
‚Ä¢ `gram altƒ±n` - Gram Altƒ±n (TL)
‚Ä¢ `wti` / `petrol` - Petrol
‚Ä¢ `brent` - Brent Petrol
‚Ä¢ `bakƒ±r` - Bakƒ±r
‚Ä¢ `doƒüalgaz` - Doƒüalgaz

*üí± D√ñVƒ∞Z √áƒ∞FTLERƒ∞:*
‚Ä¢ `eur/usd` - Euro/Dolar
‚Ä¢ `gbp/usd` - Sterlin/Dolar  
‚Ä¢ `usd/try` - Dolar/TL
‚Ä¢ `eur/try` - Euro/TL
‚Ä¢ `usd/jpy` - Dolar/Yen
‚Ä¢ `usd/chf` - Dolar/ƒ∞svi√ßre Frangƒ±

*üìä Hƒ∞SSELER:*
‚Ä¢ `THYAO` - T√ºrk Hava Yollarƒ±
‚Ä¢ `SISE` - ≈ûi≈üe Cam
‚Ä¢ `AKBNK` - Akbank
‚Ä¢ `GARAN` - Garanti Bankasƒ±
‚Ä¢ `ASELS` - Aselsan
‚Ä¢ `Bƒ∞MAS` - BIM Maƒüazalarƒ±
‚Ä¢ *Diƒüer BIST hisseleri i√ßin sadece kod yazƒ±n*

*‚Çø KRƒ∞PTO PARALAR:*
‚Ä¢ `btc` - Bitcoin
‚Ä¢ `eth` - Ethereum
‚Ä¢ `xrp` - Ripple
‚Ä¢ `ada` - Cardano
‚Ä¢ `sol` - Solana
‚Ä¢ `bnb` - Binance Coin
‚Ä¢ `doge` - Dogecoin

*üìç √ñRNEK SORGULAR:*
`us100`, `altƒ±n`, `eur/usd`, `THYAO`, `btc`, `gram altƒ±n`

*‚ö° √ñZELLƒ∞KLER:*
‚Ä¢ 15dk/1sa/4sa trend analizi
‚Ä¢ RSI g√∂stergesi + Ekonomik takvim
‚Ä¢ Destek/diren√ß seviyeleri
‚Ä¢ Ger√ßek zamanlƒ± fiyatlar

_Bot yatƒ±rƒ±m tavsiyesi deƒüildir. YTD._
""")

@bot.message_handler(func=lambda m: True, content_types=["text"])
def handle_msg(msg):
    # Grup kontrol√º
    if not grup_uye_mi(msg.from_user.id):
        bot.reply_to(msg, f"‚ùå Botu kullanabilmek i√ßin grubumuza katƒ±lmalƒ±sƒ±nƒ±z: {GRUP_LINK}")
        return
    
    # Kullanƒ±cƒ±yƒ± kaydet
    if msg.from_user:
        log_user(msg.from_user.id, 
                 msg.from_user.username, 
                 msg.from_user.first_name)
    
    user_tag = f"@{msg.from_user.username}" if (msg.from_user and msg.from_user.username) else (msg.from_user.first_name or "Kullanƒ±cƒ±")
    q = msg.text.strip()
    try:
        res = analyze_symbol(q)
        txt = render(user_tag, res)
        bot.reply_to(msg, txt)
        
        # 1 dakika sonra √∂zel mesaj g√∂nder
        kullanici_adi = msg.from_user.first_name or "Deƒüerli √ºyemiz"
        gecikmeli_ozel_mesaj(msg.from_user.id, kullanici_adi)
        
    except Exception as e:
        logging.exception("Hata: %s", e)
        bot.reply_to(msg, "Beklenmeyen bir hata oldu. Birazdan tekrar dener misin?")

# ====== ANA √áALI≈ûTIRMA ======
if __name__ == "__main__":
    # Veritabanƒ±nƒ± ba≈ülat
    init_db()
    print("Veritabanƒ± hazƒ±r...")
    
    print("Bot √ßalƒ±≈üƒ±yor‚Ä¶ (Yahoo Finance tabanlƒ± TA + Ekonomik takvim)")
    bot.infinity_polling(timeout=20, long_polling_timeout=10)